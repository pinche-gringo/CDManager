                       CDManager

Utility to manage CDs/DVDs (audio and video)
Copyright (C) 2004 - 2009 Markus Schwab <g17m0@users.sourceforge.net>
-----------------------------------------------------------------------

The package is distributed under the GNU General Public License; in the hope
that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
file COPYING for details.


Description
-----------

The CDManager manages records and movies (stored on CD or DVD media). The
managed information can be exported to HTML documents. The highlight of the
program is likely its ability to store movies in different languages
simultanously (e.g. the movie "Lock, Stock & two smoking barrels" with its
german name "Bube, Dame, König, Gras" and its spanish name "Juegos, Trampas
& dos armas").


How to build the CDManager
--------------------------

  Basically with the GNU mantra:

    ./configure
    make install

  See the file INSTALL for more details.


Setting up the database
-----------------------

  MySQL should already be running. How to achive this is beyond the scope of
  this document. Consult your local documentation how to setup, configure,
  secure and run it.

  The database can be created by running

    make createDB

  in the SQL/ directory. You are prompted to enter the (MySQL) root password
  and the database is created.

  For security reasons I recommend to define a dedicated user to run
  the application. This is beyond the scope of this document; see the
  MySQL documentation for how to do so.


Changing the genres of records/movies
-------------------------------------

  The file "Genres.dat" in the "data" directory contains the genres of
  both records and movies (as I use them). The syntax is like those of
  INI-files and should be self-explainatory.

  Note that one should not change the numbers for any genre, as they
  are used in the database to define its assigned genre.

  After changing the file it must be installed (by typing make install
  in the data/ directory).

  This file is also internationalized (e.g. there might exist various
  language specific versions of it, having the extension ".xx" with xx
  indicating the language). Keep them syncronized!


Changing the sort order of the entries
--------------------------------------

  The program tries to sort the entries in a human-like way. To do so,
  it first tries to remove a single leading article and then any
  leading first names (except if this would remove the last word).

  This should lead to a list sorted by sure names or - in case of
  groups - to names having the articles stripped of.

  To be able to do so, the program needs to know, what articles and
  first names are. They can be added via the settings dialog (and are
  stored in the database).

  The SQL/ directory contains a file (populateDB.sql) which pre-fills
  the database with english, german and spanish articles and a few
  first names. Load it into the database with

    make populateDB

  in the SQL/ directory. Note that this needs a (MySQL) user called
  cdmgr, for whose password you are prompted.


Exporting the database to HTML documents
----------------------------------------

  The data is exported in a table-like structure; sorted by every
  available criteria (up- and downwards).

  This table is surrounded by header and footer information which are
  read from files which can be specified in the settings dialog
  (either with an absolut path; or else relative to the
  data-directory (which is /usr/local/share/CDManager unless other
  specified during configuring)).

  Those files are searched first in a lanuguage-depended version with
  a ".xx" appended (where xx is the language code like "de" or "es"
  and than as entered in the dialog.

  The generated HTML documents contains references to flags
  representing the languages. Those flags are stored in the data
  directory (/usr/local/share/CDManager, by default) and are called
  "xx.png" (with "xx" again the two-letter code for the language).

  The generated documents include css-files for formatting
  (records.css and movies.css, respectively). I use the following:

td.header { white-space:nowrap; vertical-align:Middle; background-color:#55879b;
            color:white; text-align:Center; font-weight:bold;
            font-familiy:Courier New,Courier,monospace; font-size:25px; }
td.separator { background-color:black; }

td.owner { border-width: 2px; border-style: solid; line-height:24px;
           background-color:linen; text-align:right; font-size:16px; }

tr.odd { background-color:lightgrey; vertical-align:Top; }
tr.even { background-color: #e8e8e8; vertical-align:Top; }

thead td { font-weight:bold; text-align:center; }

div.header { background-color: #eeeeff; border: 1px solid #b0b0b0;
             text-align: center; margin: 2px; padding: 2px; line-height: 140%; }
